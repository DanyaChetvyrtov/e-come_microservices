name: Java CI pipeline e-come

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.detect.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Find modified services
        id: detect
        run: |
          # Получаем список всех сервисов
          ALL_SERVICES=$(ls -d services/*/ | cut -d'/' -f2)
          
          # Первый коммит - собираем все
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "changed=$(echo "$ALL_SERVICES" | jq -R -s -c 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Определяем измененные файлы
          if [ "$GITHUB_BASE_REF" != "" ]; then
            CHANGED_FILES=$(git diff --name-only $GITHUB_BASE_REF...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi

          # Ищем измененные сервисы
          CHANGED_SERVICES=()
          for SERVICE in $ALL_SERVICES; do
            if echo "$CHANGED_FILES" | grep -q "^services/$SERVICE/"; then
              CHANGED_SERVICES+=("$SERVICE")
            fi
          done

          # Если изменились общие файлы - собираем все
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ] && \
             echo "$CHANGED_FILES" | grep -qE "^(docker-compose\.yml|\.github/workflows/|gradle\.properties|build\.gradle)"; then
            CHANGED_SERVICES=($ALL_SERVICES)
          fi

          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "No relevant changes detected, skipping build."
            exit 0
          fi

          echo "changed=$(echo "${CHANGED_SERVICES[@]}" | jq -R -s -c 'split(" ")')" >> $GITHUB_OUTPUT

  build-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(needs.detect-changes.outputs.changed-services) }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate service directory
        run: |
          echo "Checking services/${{ matrix.service }}"
          ls -la services/${{ matrix.service }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            services/${{ matrix.service }}/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-${{ matrix.service }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ matrix.service }}
            ${{ runner.os }}-gradle-

      - name: Prepare Gradle Wrapper
        working-directory: ./services/${{ matrix.service }}
        run: |
          if [ -f "gradlew" ]; then
            chmod +x gradlew
            ./gradlew --version
          else
            echo "::error::gradlew not found in services/${{ matrix.service }}"
            exit 1
          fi

      - name: Build with Gradle
        working-directory: ./services/${{ matrix.service }}
        run: ./gradlew clean bootJar